{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to IRAILS Installation pip install irails - install irails Commands irails project [project-name(dir-name)] - Create a new irails project. irails app [app-name(choose or input apps dir)] - Example: irails app admissions Create a new irails app. irails run [--port port] - Run project visit on http://127.0.0.1:8000 . Project layout | main.py +---apps ## Apps container (A project can have multiple containers) | +---admissions ## App dir (An application container can have multiple applications) | | | __init__.py | | +---controllers ## Controller files | | | | home_controller.py ## Controller class file,it's look like `class HomeController` | | | | __init__.py | | +---locales ## I18n locales dir,use command `apps/app:$ iralis i18n gettext` will auto generate items | | +---models ## Database models files(if you use some database support) | | | __init__.py | | +---services ## Module for business logic processing | | +---tests ## Unit testting | | +---views ## Static view files (use `Jinja2` Template) | | | | layout.html | | | | | | | +---home ## The controller action's static file(name is same to the controller's class name) | | | | home.css | | | | home.html ## Static file corresponding to action(name is same to the controller's method name) +---configs ## Project configure dir | alembic.ini ## Alembic configure file (Generally, there is no need to change, used the database migration) | casbin-adapter.csv ## Casbin auth module config adapter file() | casbin-model.conf ## Casbin auth config model | database.yaml ## Configure for database support | general.yaml ## General configures | session.yaml ## Session configures | +---data | +---alembic | | \\---versions | \\---db | +---public ## Public dir (will mounted to the '/public' url) | | error_404.html ## Error page ... | | error_500.html | +---uploads ## Others dir(if your need or not) Extras commands irails i18n gettext --generate i18n in irails app dir Take a look configure file general.yaml app: appdir: - apps enabled: null root: apps.root cors: allow_credentials: true allow_headers: - '*' allow_methods: - '*' allow_origins: - '*' debug: true errors: error_404_page: '{ROOT.public_dir}/error_404.html' error_500_page: '{ROOT.public_dir}/error_500.html' log: file: '' level: DEBUG name: iRails public_dir: ./public view: jinja2: block_end_string: '%}' block_start_string: '{%' comment_end_string: '#}' comment_start_string: '{#' variable_end_string: '}' variable_start_string: ${ static_format: - vue - html i18n: lang: ['zh'] url_lang_key: 'lang' controller file from irails import api_router,api,Request,Response,BaseController,application @api_router(path='/{controller}',auth='none') class AdminController(BaseController): @api.get(\"/index\") def index(self): \"\"\" :title Admin \"\"\" return self.view()","title":"Getting Start"},{"location":"#welcome-to-irails","text":"","title":"Welcome to IRAILS"},{"location":"#installation","text":"pip install irails - install irails","title":"Installation"},{"location":"#commands","text":"irails project [project-name(dir-name)] - Create a new irails project. irails app [app-name(choose or input apps dir)] - Example: irails app admissions Create a new irails app. irails run [--port port] - Run project visit on http://127.0.0.1:8000 .","title":"Commands"},{"location":"#project-layout","text":"| main.py +---apps ## Apps container (A project can have multiple containers) | +---admissions ## App dir (An application container can have multiple applications) | | | __init__.py | | +---controllers ## Controller files | | | | home_controller.py ## Controller class file,it's look like `class HomeController` | | | | __init__.py | | +---locales ## I18n locales dir,use command `apps/app:$ iralis i18n gettext` will auto generate items | | +---models ## Database models files(if you use some database support) | | | __init__.py | | +---services ## Module for business logic processing | | +---tests ## Unit testting | | +---views ## Static view files (use `Jinja2` Template) | | | | layout.html | | | | | | | +---home ## The controller action's static file(name is same to the controller's class name) | | | | home.css | | | | home.html ## Static file corresponding to action(name is same to the controller's method name) +---configs ## Project configure dir | alembic.ini ## Alembic configure file (Generally, there is no need to change, used the database migration) | casbin-adapter.csv ## Casbin auth module config adapter file() | casbin-model.conf ## Casbin auth config model | database.yaml ## Configure for database support | general.yaml ## General configures | session.yaml ## Session configures | +---data | +---alembic | | \\---versions | \\---db | +---public ## Public dir (will mounted to the '/public' url) | | error_404.html ## Error page ... | | error_500.html | +---uploads ## Others dir(if your need or not)","title":"Project layout"},{"location":"#extras-commands","text":"irails i18n gettext --generate i18n in irails app dir","title":"Extras commands"},{"location":"#take-a-look","text":"","title":"Take a look"},{"location":"#configure-file-generalyaml","text":"app: appdir: - apps enabled: null root: apps.root cors: allow_credentials: true allow_headers: - '*' allow_methods: - '*' allow_origins: - '*' debug: true errors: error_404_page: '{ROOT.public_dir}/error_404.html' error_500_page: '{ROOT.public_dir}/error_500.html' log: file: '' level: DEBUG name: iRails public_dir: ./public view: jinja2: block_end_string: '%}' block_start_string: '{%' comment_end_string: '#}' comment_start_string: '{#' variable_end_string: '}' variable_start_string: ${ static_format: - vue - html i18n: lang: ['zh'] url_lang_key: 'lang'","title":"configure file general.yaml"},{"location":"#controller-file","text":"from irails import api_router,api,Request,Response,BaseController,application @api_router(path='/{controller}',auth='none') class AdminController(BaseController): @api.get(\"/index\") def index(self): \"\"\" :title Admin \"\"\" return self.view()","title":"controller file"},{"location":"controller/","text":"Controller The controller is a web application entry point, a MVC applications must input requests into the controller for processing Commonly used must be imported: from irails import route,api,Request,Response,BaseController,application defines @route(path='/{controller}',auth='none') class ExampleController(BaseController): pass controller class must inherit BaseController controller must use @route decorator route @route(path:str=\"\", version:str=\"\",**allargs) The parameter path specifies the URL format, such as app/{controller}/{version} , which will be prefixed with app/home/v1.0 as the route. Actions within the controller will be connected to this route, as defined by the controller Home action, the URL address of home is /app/home/v1.0/home , and version specifies the version information. If this parameter is provided, the path parameter will automatically carry the {controller} flag to define this route. For more information on auth, please refer to the authentication system. define a root URL @route() #use empty params list to @route() class HomeController(BaseController) @api.get(\"/\") def home(self): return self.view() it's will route to home method of the url '/' Actions Defining an action is like defining a class instance method, but it must use @ API decorators such as @api.get , @api.post , etc @api decorator @api.get Use http method GET to define a route @api.post Use http method POST to define a route @api.head ditto... but method is HEAD @api.put ditto... but method is PUT @api.delete ditoo... but method is DELETE @api.patch ditoo... but method is PATCH @api.trace ditoo... but method is TRACE @api.options ditoo... but method is OPTIONS @api.websocket define a websocket route. Example: @api.websocket(\"/chat/{client_id}\") async def websocket_endpoint(self, websocket: WebSocket,client_id: int): await websocket.accept() websockets[client_id]=(websocket) try: while True: data = await websocket.receive_text() await websocket.send_text(f\"You wrote: {data}\" ) for clientid in websockets: if client_id!=clientid: await websockets[clientid].send_text(f\"Client #{client_id} says: {data}\") except WebSocketDisconnect: websockets.remove(websocket) for connection in websockets: await connection.send_text(f\"Client #{client_id} left the chat\") @api.http ditoo... but it's provide param methods is a list like ['GET','POST'] with param auth ,also see the authentication system Builtin supports of controller self.request #the request object self.request['url'] #the client request URL object self.request.headers['accept-languages'] self.session #the session object Dict self.session['key1'] = \"K1\" #set a session value v = self.session['key1'] #get a session value del self.session['key1'] #delete a session self.cookies #the cookies object Dict self.cookies.get('a',1) self.cookies['a'] = self.cookies['a'] + 1 del self.cookies['a'] self.get_param #get request param from any where self.get_param(\"username\") #any use form'url query'post value self['password'] #same to self.get_param(\"password\") self.view #the Jinja2 Templace response return self.view() #no param is render the default html file localed on `views/{controller_name}/{action_name}.html` \"\"\"params: content:str=\"\",view_path:str=\"\", format:str=\"html\", context: dict={},local2context:bool=True,**kwargs\"\"\" return self.view(\"Hello world\") #just return `hello world` and status code is 200 any value return on actions return {\"foo\":\"bar\"} return \"HEELO\" it will convert Response object automatic await self._save_upload_file(self,file:File) self._verity_successed(self,user,msg=\"User authentication successed!\",redirect='/') also see the authentication system self._verity_error(self,msg=\"User authentication failed!\") also see the authentication system self._user_logout(self,msg=\"You are successed logout!\",redirect='/') also see the authentication system self.redirect(self,url ,statu_code=StateCodes.HTTP_303_SEE_OTHER) self.flash Flash inspiration comes from the ROR, which is saved in the session. When its value is set, it will be cleared when the next request is completed, so it is generally used to save one-time notifications, such as login success notifications self.flash = \"you are success logined!\" self.log(msg:str) print log infomation to console or log file. for more infomation for log,see config.log self._(text:str) Multilingual translation","title":"controller"},{"location":"controller/#controller","text":"The controller is a web application entry point, a MVC applications must input requests into the controller for processing Commonly used must be imported: from irails import route,api,Request,Response,BaseController,application","title":"Controller"},{"location":"controller/#defines","text":"@route(path='/{controller}',auth='none') class ExampleController(BaseController): pass controller class must inherit BaseController controller must use @route decorator","title":"defines"},{"location":"controller/#route","text":"@route(path:str=\"\", version:str=\"\",**allargs) The parameter path specifies the URL format, such as app/{controller}/{version} , which will be prefixed with app/home/v1.0 as the route. Actions within the controller will be connected to this route, as defined by the controller Home action, the URL address of home is /app/home/v1.0/home , and version specifies the version information. If this parameter is provided, the path parameter will automatically carry the {controller} flag to define this route. For more information on auth, please refer to the authentication system.","title":"route"},{"location":"controller/#define-a-root-url","text":"@route() #use empty params list to @route() class HomeController(BaseController) @api.get(\"/\") def home(self): return self.view() it's will route to home method of the url '/'","title":"define a root URL"},{"location":"controller/#actions","text":"Defining an action is like defining a class instance method, but it must use @ API decorators such as @api.get , @api.post , etc","title":"Actions"},{"location":"controller/#api-decorator","text":"@api.get Use http method GET to define a route @api.post Use http method POST to define a route @api.head ditto... but method is HEAD @api.put ditto... but method is PUT @api.delete ditoo... but method is DELETE @api.patch ditoo... but method is PATCH @api.trace ditoo... but method is TRACE @api.options ditoo... but method is OPTIONS @api.websocket define a websocket route. Example: @api.websocket(\"/chat/{client_id}\") async def websocket_endpoint(self, websocket: WebSocket,client_id: int): await websocket.accept() websockets[client_id]=(websocket) try: while True: data = await websocket.receive_text() await websocket.send_text(f\"You wrote: {data}\" ) for clientid in websockets: if client_id!=clientid: await websockets[clientid].send_text(f\"Client #{client_id} says: {data}\") except WebSocketDisconnect: websockets.remove(websocket) for connection in websockets: await connection.send_text(f\"Client #{client_id} left the chat\") @api.http ditoo... but it's provide param methods is a list like ['GET','POST'] with param auth ,also see the authentication system","title":"@api decorator"},{"location":"controller/#builtin-supports-of-controller","text":"self.request #the request object self.request['url'] #the client request URL object self.request.headers['accept-languages'] self.session #the session object Dict self.session['key1'] = \"K1\" #set a session value v = self.session['key1'] #get a session value del self.session['key1'] #delete a session self.cookies #the cookies object Dict self.cookies.get('a',1) self.cookies['a'] = self.cookies['a'] + 1 del self.cookies['a'] self.get_param #get request param from any where self.get_param(\"username\") #any use form'url query'post value self['password'] #same to self.get_param(\"password\") self.view #the Jinja2 Templace response return self.view() #no param is render the default html file localed on `views/{controller_name}/{action_name}.html` \"\"\"params: content:str=\"\",view_path:str=\"\", format:str=\"html\", context: dict={},local2context:bool=True,**kwargs\"\"\" return self.view(\"Hello world\") #just return `hello world` and status code is 200 any value return on actions return {\"foo\":\"bar\"} return \"HEELO\" it will convert Response object automatic await self._save_upload_file(self,file:File) self._verity_successed(self,user,msg=\"User authentication successed!\",redirect='/') also see the authentication system self._verity_error(self,msg=\"User authentication failed!\") also see the authentication system self._user_logout(self,msg=\"You are successed logout!\",redirect='/') also see the authentication system self.redirect(self,url ,statu_code=StateCodes.HTTP_303_SEE_OTHER) self.flash Flash inspiration comes from the ROR, which is saved in the session. When its value is set, it will be cleared when the next request is completed, so it is generally used to save one-time notifications, such as login success notifications self.flash = \"you are success logined!\" self.log(msg:str) print log infomation to console or log file. for more infomation for log,see config.log self._(text:str) Multilingual translation","title":"Builtin supports of controller"}]}